var DIRECTORY_PATH = File(module.filename).parent.path;var os = application.os;var isMac = os.isMac;var isWindows = os.isWindows;var isLinux = os.isLinux;var EXECUTABLE_PATH = (function(){	if(isMac){		return DIRECTORY_PATH + 'MacOS/opc';	}	if(isLinux){		return DIRECTORY_PATH + 'Linux64/opc';	}	if(isWindows){		return DIRECTORY_PATH + 'Windows64/opc.exe';	}})();//exports.executablePath = EXECUTABLE_PATH;var execute = function(path, command, stdIn){	var result = {		'console':{			'stdIn':'',			'stdOut':null,				'stdErr':''},		'worker':{			'hasStarted':false,			'exitStatus':null,			'forced':null}	};		if((/^\S/).test(command)){		path += ' ';	}	result.console.stdIn = path + command;	var worker = new SystemWorker(result.console.stdIn);	worker.setBinary(true);			worker.onmessage = function(e){		if(!result.console.stdOut){			result.console.stdOut = new Buffer(e.data.length);			e.data.copy(result.console.stdOut);		}else{			var temp = new Buffer(result.console.stdOut.length + e.data.length);			result.console.stdOut.copy(temp);			e.data.copy(temp, e.data.length);			result.console.stdOut = temp.slice(0);		}	}	worker.onerror = function(e){		try{			result.console.stdErr += e.data.toString('utf8');		}catch(e){		for(var i = 0;i < e.messages.length;++i){			console.error('%s', e.messages[i]);					}		}	}	worker.onterminated = function(e){		result.worker.hasStarted = e.hasStarted;		result.worker.exitStatus = e.exitStatus;		result.worker.forced = e.forced;					exitWait();	}	if(typeof stdIn === 'string' || stdIn instanceof Buffer){		worker.postMessage(stdIn);		worker.endOfInput();	}				worker.wait();		return result;}var escapePath = function(path){	if(typeof path === 'string'){		if(isMac || isLinux){			return path.replace(/([\\!"#$%&\'()=~|<>?;*`\[\] ])/g, '\\$1');		}			if(isWindows){			if((/[&|<>()%\^\\" ]/).test(path)){								if((/\\$/).test(path)){					path = '"' + path + '\\"';				}else{					path = '"' + path + '"';				}			}			return path;		}	}}exports.documentTypeForExtension = function(type){	var typeCode;	switch(type){		case 'docx':		case '.docx':							typeCode = '0';			break;		case 'XLSX':		case 'xlsx':		case '.xlsx':							typeCode = '1';			break;		case 'pptx':			case '.pptx':							typeCode = '2';			break;							}		if(typeCode){		return execute(escapePath(EXECUTABLE_PATH), '-q '+ typeCode).console.stdOut.toString();	}}function listToArray1(list){	var lines = list.match(/.+/g);	var result = [];	lines.forEach(function(line){		var items = line.split('\t');		result.push({'type':items[0]});	});	return result;}function listToArray2(list){	var lines = list.match(/.+/g);	var result = [];	lines.forEach(function(line){		var items = line.split('\t');		result.push({'extension':items[0], 'type':items[1]});	});	return result;}function listToArray2a(list){	var lines = list.match(/.+/g);	var result = [];	lines.forEach(function(line){		var items = line.split('\t');		result.push({'resource':items[0], 'type':items[1]});	});	return result;}function listToArray2b(list){	var lines = list.match(/.+/g);	var result = [];	lines.forEach(function(line){		var items = line.split('\t');		result.push({'resource':items[0], 'relation':items[1]});	});	return result;}exports.extensionMap = function(path){	if(typeof path === 'string'){		var result = execute(escapePath(EXECUTABLE_PATH), '-a ' + path);		if(result.console.stdOut){			return listToArray2(result.console.stdOut.toString());		}else return [];	}}exports.resourceTypeList = function(path){	if(typeof path === 'string'){		var result = execute(escapePath(EXECUTABLE_PATH), '-e ' + path);		if(result.console.stdOut){			return listToArray1(result.console.stdOut.toString());		}else return [];	}}exports.relationTypeList = function(path){	if(typeof path === 'string'){		var result = execute(escapePath(EXECUTABLE_PATH), '-d ' + path);		if(result.console.stdOut){			return listToArray1(result.console.stdOut.toString());		}else return [];	}}exports.externalResourceTypeList = function(path){	if(typeof path === 'string'){		var result = execute(escapePath(EXECUTABLE_PATH), '-b ' + path);		if(result.console.stdOut){			return listToArray1(result.console.stdOut.toString());		}else return [];	}}exports.documentType = function(path){	if(typeof path === 'string'){		var result = execute(escapePath(EXECUTABLE_PATH), '-q ' + path);		if(result.console.stdOut){			return result.console.stdOut.toString();		}	}}exports.addResourceType = function(path, extension, type){	if((typeof path === 'string')	&& (typeof extension === 'string')	&& (typeof type === 'string')){		var result = execute(escapePath(EXECUTABLE_PATH), '-f ' + path + ' ' + extension + ' ' + type);		if(result.console.stdOut){			return result.console.stdOut.toString();		}else return false;	}}exports.externalResourceList = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-h ' + path + ' ' + resource);		if(result.console.stdOut){			return listToArray2a(result.console.stdOut.toString());		}else return [];	}}exports.resourceList = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-k ' + path + ' ' + resource);		if(result.console.stdOut){			return listToArray2a(result.console.stdOut.toString());		}else return [];	}}exports.relationList = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-o ' + path + ' ' + resource);		if(result.console.stdOut){			return listToArray2b(result.console.stdOut.toString());		}else return [];	}}exports.relationType = function(type){	var typeCode;	switch(type){		case 'image':						typeCode = '0';			break;		case 'styles':						typeCode = '1';			break;		case 'styles-with-effects':							typeCode = '2';			break;			case 'settings':							typeCode = '3';			break;			case 'web-settings':							typeCode = '4';			break;			case 'font-table':							typeCode = '5';			break;			case 'theme':							typeCode = '6';			break;																			}		if(typeCode){		return execute(escapePath(EXECUTABLE_PATH), '-r ' + typeCode).console.stdOut.toString();	}}exports.getResourceSize = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-j ' + path + ' ' + resource);		if(result.console.stdOut){			return parseInt(result.console.stdOut.toString(), 10);		}	}}exports.getResource = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-i ' + path + ' ' + resource);		if(result.console.stdOut){			return result.console.stdOut;		}	}}exports.deleteResource = function(path, resource){	if(typeof path === 'string'){		if(typeof resource !== 'string'){			resource = '';		}		var result = execute(escapePath(EXECUTABLE_PATH), '-g ' + path + ' ' + resource);		return !!result.console.stdOut;	}}exports.createRelation = function(path, resourceSrc, resourceDst, type, name){	if((typeof path === 'string')	&& (typeof resourceSrc === 'string')	&& (typeof resourceDst === 'string')	&& (typeof type === 'string')	&& (typeof name === 'string')){		var result = execute(escapePath(EXECUTABLE_PATH), '-n ' + path + ' ' + resourceSrc + ' ' + ' ' + resourceDst + ' ' + type + ' ' + name);		if(result.console.stdOut){			return (0 < parseInt(result.console.stdOut.toString(), 10));		}	}}exports.createExternalRelation = function(path, resourceSrc, resourceDst, type, index, prefix){	if((typeof path === 'string')	&& (typeof resourceSrc === 'string')	&& (typeof resourceDst === 'string')	&& (!isNaN(parseInt(index, 10)))	&& (typeof type === 'string')){		if(typeof prefix !== 'string'){			prefix = '';		}		prefix = prefix.length ? prefix : 'rId';		var result = execute(escapePath(EXECUTABLE_PATH), '-m ' + path + ' ' + resourceSrc + ' ' + ' ' + resourceDst + ' ' + type + ' ' + index + ' ' + prefix);		if(result.console.stdOut){			return parseInt(result.console.stdOut.toString(), 10);		}	}}exports.setResource = function(path, resource, type, data){	if((typeof path === 'string')	&& (typeof type === 'string')){		if(typeof resource !== 'string'){			resource = '';		}				var result = execute(escapePath(EXECUTABLE_PATH), '-l ' + path + ' ' + resource + ' ' + type, data);		return result.console.stdOut;	}}exports.getNewRelationId = function(relations){	if(Array.isArray(relations)){		var relationIds = [];		relations.forEach(function(relation){			relationIds.push(relation.relation);		});		var i = 0, rId;		do{			rId = 'rId' + (++i);		}while(relationIds.indexOf(rId) !== -1)		return rId;	}}